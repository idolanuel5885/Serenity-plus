name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Type check
        run: npx tsc --noEmit

  unit-tests:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  integration-tests:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration

  build:
    runs-on: ubuntu-latest
    needs: [pre-checks, unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  partnership-flow-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run Partnership Flow Tests
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npx playwright test tests/api/partnership-flow.spec.ts --reporter=line
      
      - name: Upload partnership test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: partnership-test-results
          path: test-results/

  onboarding-workflow-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
          - uses: actions/checkout@v4
          
          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
              node-version: '18'
              cache: 'npm'
          
          - name: Install dependencies
            run: npm ci
          
          - name: Install Playwright browsers
            run: npx playwright install --with-deps
          
          - name: Run onboarding workflow tests
            run: npx playwright test tests/e2e/onboarding-workflow.spec.ts
          
          - name: Run notification redirect tests
            run: npx playwright test tests/e2e/notification-redirect.spec.ts
          
          - name: Run partnership system tests
            run: npx playwright test tests/e2e/partnership-system.spec.ts
          
          - name: Run UI improvements tests
            run: npx playwright test tests/e2e/ui-improvements.spec.ts
          
          - name: Upload onboarding test results
            uses: actions/upload-artifact@v4
            if: failure()
            with:
              name: onboarding-test-results
              path: test-results/

  security-scan:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  quality-gate:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, partnership-flow-tests, onboarding-workflow-tests, security-scan]
    if: always()
    steps:
      - name: Check all jobs passed
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.integration-tests.result }}" != "success" || 
                "${{ needs.e2e-tests.result }}" != "success" || 
                "${{ needs.partnership-flow-tests.result }}" != "success" ||
                "${{ needs.onboarding-workflow-tests.result }}" != "success" ||
                "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "One or more quality gates failed"
            echo "Unit tests: ${{ needs.unit-tests.result }}"
            echo "Integration tests: ${{ needs.integration-tests.result }}"
            echo "E2E tests: ${{ needs.e2e-tests.result }}"
            echo "Partnership flow tests: ${{ needs.partnership-flow-tests.result }}"
            echo "Onboarding workflow tests: ${{ needs.onboarding-workflow-tests.result }}"
            echo "Security scan: ${{ needs.security-scan.result }}"
            exit 1
          fi
          echo "All quality gates passed!"


