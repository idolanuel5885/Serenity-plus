generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String?
  image               String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  weeklyTarget        Int
  primaryWindow       String
  timezone            String
  usualSitLength      Int
  whyPractice         String?
  supportNeeds        String?
  receivedInvites     Invitation[]   @relation("Invitee")
  invitations         Invitation[]   @relation("Inviter")
  notifications       Notification[]
  partnershipsAsUser2 Partnership[]  @relation("User2Partnerships")
  partnershipsAsUser1 Partnership[]  @relation("User1Partnerships")
  sessions            Session[]

  @@map("users")
}

model Partnership {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user1Id           String
  user2Id           String
  isActive          Boolean       @default(true)
  score             Int           @default(0)
  weeklyGoal        Int
  currentWeekNumber Int           @default(1)
  currentWeekStart  DateTime
  user1Sits         Int           @default(0)
  user2Sits         Int           @default(0)
  currentStreak     Int           @default(0)
  longestStreak     Int           @default(0)
  totalWeeks        Int           @default(0)
  user2             User          @relation("User2Partnerships", fields: [user2Id], references: [id])
  user1             User          @relation("User1Partnerships", fields: [user1Id], references: [id])
  sessions          Session[]
  weekHistory       WeekHistory[]

  @@unique([user1Id, user2Id])
  @@map("partnerships")
}

model WeekHistory {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  weekNumber    Int
  weekStart     DateTime
  weekEnd       DateTime
  user1Sits     Int
  user2Sits     Int
  goalMet       Boolean
  partnershipId String
  partnership   Partnership @relation(fields: [partnershipId], references: [id])

  @@map("week_history")
}

model Session {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  duration      Int
  isCompleted   Boolean      @default(false)
  completedAt   DateTime?
  userId        String
  partnershipId String?
  partnership   Partnership? @relation(fields: [partnershipId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Invitation {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  inviterId  String
  inviteeId  String?
  inviteCode String    @unique
  invitee    User?     @relation("Invitee", fields: [inviteeId], references: [id])
  inviter    User      @relation("Inviter", fields: [inviterId], references: [id])

  @@map("invitations")
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  type      String
  message   String
  data      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}
