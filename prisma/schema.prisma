// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Onboarding data
  weeklyTarget      Int      // How many times per week they want to sit
  primaryWindow     String   // e.g., "06:00â€“09:00"
  timezone          String   // e.g., "GMT+2"
  usualSitLength    Int      // Duration in minutes
  whyPractice       String?  // Why they practice
  supportNeeds      String?  // How to best support them

  // Relationships
  partnershipsAsUser1 Partnership[] @relation("User1Partnerships")
  partnershipsAsUser2 Partnership[] @relation("User2Partnerships")
  sessions            Session[]
  invitations         Invitation[] @relation("Inviter")
  receivedInvites     Invitation[] @relation("Invitee")
  notifications       Notification[]

  @@map("users")
}

model Partnership {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Partnership details
  user1Id     String
  user2Id     String
  isActive    Boolean @default(true)
  score       Int     @default(0) // Partnership health score
  weeklyGoal  Int     // Combined weekly target (user1.weeklyTarget + user2.weeklyTarget)

  // Week tracking
  currentWeekNumber Int @default(1) // Week 1, 2, 3, etc.
  currentWeekStart  DateTime // When current week started
  user1Sits         Int @default(0) // Sits this week for user1
  user2Sits         Int @default(0) // Sits this week for user2
  
  // Streak tracking
  currentStreak     Int @default(0) // Current consecutive weeks meeting goal
  longestStreak     Int @default(0) // Longest consecutive weeks meeting goal
  totalWeeks        Int @default(0) // Total weeks in partnership

  // Relationships
  user1 User @relation("User1Partnerships", fields: [user1Id], references: [id])
  user2 User @relation("User2Partnerships", fields: [user2Id], references: [id])
  sessions Session[]
  weekHistory WeekHistory[]

  @@unique([user1Id, user2Id])
  @@map("partnerships")
}

model WeekHistory {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  
  // Week details
  weekNumber   Int      // Week 1, 2, 3, etc.
  weekStart    DateTime // When this week started
  weekEnd      DateTime // When this week ended
  user1Sits    Int      // Sits completed by user1 this week
  user2Sits    Int      // Sits completed by user2 this week
  goalMet      Boolean  // Whether the weekly goal was met
  
  // Relationships
  partnershipId String
  partnership   Partnership @relation(fields: [partnershipId], references: [id])

  @@map("week_history")
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  duration     Int      // Duration in minutes
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?

  // Relationships
  userId       String
  partnershipId String?
  user         User       @relation(fields: [userId], references: [id])
  partnership  Partnership? @relation(fields: [partnershipId], references: [id])

  @@map("sessions")
}

model Invitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?

  // Invitation details
  inviterId String
  inviteeId String?
  inviteCode String @unique // For shareable links

  // Relationships
  inviter User  @relation("Inviter", fields: [inviterId], references: [id])
  invitee User? @relation("Invitee", fields: [inviteeId], references: [id])

  @@map("invitations")
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  type      String   // e.g., "congratulation", "invitation", "reminder"
  message   String
  data      String?  // JSON data for additional context

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}